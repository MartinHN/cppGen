#include <iostream>
namespace reflect{
namespace debug{
    
template<>
void dumpValue< <%-name%> >(const <%-name%> & obj,int indent){
    
    std::cout << "{\n";
    <% if (members.length) { %>  
        auto pad = std::string(indentStep * (indent+1), ' '); 
        <% } %>
        <% for(const m of members){ %>
            std::cout << pad << "<%=m.name%>";
            if(includeType)
            std::cout << " {<%-m.type%>}";
            std::cout << " : " ;
            dumpValue(obj.<%=m.name%>,indent+1);
            std::cout <<  std::endl;
            <% } //endfor -%>
            std::cout << std::string(indentStep * (indent), ' ')<< "}\n";
        }

template<typename T>
void dump(const T & obj);

template<>
void dump< <%-name%> > (const <%-name%> & obj){
    std::cout << "<%-name%> ";
    dumpValue(obj,0);
}


}
} 

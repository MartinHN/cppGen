#include <iostream>
#include <type_traits>
#include <sstream> //for string to stream convs

namespace uapi{
namespace proxy{

struct <%-name%>Proxy :public MemberContainer{
    <%-name%>Proxy(<%-name%> & o):obj(o)
    <% for(const m of members){ -%>
      ,<%=m.name%>("<%=m.name%>",obj.<%=m.name%>,*this)
    <% } //endfor -%>
    {};



  // Members
  <%-name%> & obj;
  <% for(const m of members){ -%>
    MemberImpl<<%-m.type%>> <%=m.name%>;
  <% } //endfor -%>

  // overridable functions
  <% for(const f of methods){ -%>
    virtual void <%=f.name%>(<%-f.getFunctionArgsWithVariables()%> <% if(f.hasArgs()) {%>,<% } %>
    ProxySetter* from=nullptr){
    MethodCallInfo info("<%=f.name%>",
    <% if(f.hasArgs()) {-%>
      <%-"std::make_tuple("+f.getArgVarNames().join(",")+")"-%>
    <% }else { -%>
      variants::VoidArgs()
    <% } -%>
    );
    methodCalledCb(&info,from);
    }
  <% } //endfor -%>

};  // end ProxyClass 
}
}

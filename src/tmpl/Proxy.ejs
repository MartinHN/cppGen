#include <iostream>
#include <type_traits>
#include <sstream> //for string to stream convs

namespace reflect{
namespace proxy{

struct <%-name%>Proxy :protected MemberContainer{
    <%-name%>Proxy(<%-name%> & o):obj(o)
    <% for(const m of members){ -%>
      ,<%=m.name%>("<%=m.name%>",obj.<%=m.name%>,*this)
    <% } //endfor -%>
    {};


  std::function<void(const std::string & name,variants::AnyMemberRefVar member,ProxySetter*from)>onMemberChange;
  void memberModifiedCb(const std::string & memberName,variants::AnyMemberRefVar memberVal,ProxySetter*from)override{
    if(onMemberChange){
      onMemberChange(memberName,memberVal,from);
    }
  };

  std::function<void(MethodCallInfo* method,ProxySetter*from)>onMethodCall;
  void methodCalledCb(MethodCallInfo * callInfo,ProxySetter *from){
    if(onMethodCall){
      onMethodCall(callInfo,from);
    }
  }
  // Members
  <%-name%> & obj;
  <% for(const m of members){ -%>
    MemberImpl<<%-m.type%>> <%=m.name%>;
  <% } //endfor -%>

  <% for(const f of methods){ -%>
    virtual void <%=f.name%>(<%-f.getFunctionArgsWithVariables()%> <% if(f.hasArgs()) {%>,<% } %>
    ProxySetter* from=nullptr){
    MethodCallInfo info("<%=f.name%>",
    <% if(f.hasArgs()) {-%>
      <%-"std::make_tuple("+f.getArgVarNames().join(",")+")"-%>
    <% }else { -%>
      variants::VoidArgs()
    <% } -%>
    );
    methodCalledCb(&info,from);
    // todo full function passing

    }
  <% } //endfor -%>

};  // end ProxyClass 
}
}

namespace reflect{
namespace serialize{
    
using OutStr = std::ostream;
using InStr = std::istream;

template<>
void write_value< <%-name%> > (OutStr & os,const <%-name%> & obj){
    if(checkStream(os)){
        <% for(const m of members){ -%>
            write_value<decltype(obj.<%=m.name%>)>(os,obj.<%=m.name%>);
    <% } //endfor -%>
    }
}

void to_bin_<%-name%> (const <%-name%> & obj,OutStr & os){
    if(checkStream(os))
        write_value(os,obj);
}


//template<typename T>
    void to_bin_str_<%-name%> (const <%-name%> & obj,std::string & outBuf){
        std::ostringstream oss;
        reflect::serialize::to_bin_<%-name%>(obj,oss);
        outBuf = oss.str();
    }



/////////////////////////////
// from_bin
///////////////////////////

template<>
void parse_value< <%-name%> > (  <%-name%> & obj, InStr & is){
    if(checkStream(is)){
        <% for(const m of members){ -%>
            parse_value<std::decay_t<decltype(obj.<%=m.name%>)>>( obj.<%=m.name%>,is);
            <% } //endfor -%>
        }
}

template<>
void from_bin< <%-name%> > ( <%-name%> & obj,InStr & is){
    if(checkStream(is))
        parse_value<<%-name%>>(obj,is);
    
}


   

}
} 

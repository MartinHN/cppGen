#include <functional>
#include <string>
#define UAPI_HAS_VARIANTS 1
// #include "traits.h" 

#define THROW_LOG(x) {std::cerr << (x) << std::endl;}

#include <variant>
#include <optional>
namespace uapi{
namespace variants{
    
    //ref wrappers
    <% var classesRef = {};
    for (const c of [...classes,...(builtins.map(e=>{return {name:e}}))]) {
        var classRefName = c.name+"_ref"
        // console.log(classRefName)
        for( const c of "<>,%: ")
            classRefName=classRefName.replaceAll(c,"_");
        classesRef[c.name]=classRefName; 
    %>
        
        using <%-classRefName%> = std::reference_wrapper<<%-c.name%>>;

    <% } %>




    // big AnyVar
   typedef  std::variant < <%- Object.values(classesRef).join(',') %> > AnyMemberRefVar;
   typedef std::optional<AnyMemberRefVar>OptMemberRef;




    template<typename T>
        struct isUserDefined : std::false_type{};
        <% for (const c of classes) {if(!c.isUserDefined) continue; %>
           template<> struct isUserDefined< <%-c.name %> > :std::true_type{};
        <% } %>
    

    template<typename T>
    OptMemberRef getMemberWithName(T& obj,const char * name );
    <% for (const c of classes) {if(!c.isUserDefined) continue; %>
        template<>
        OptMemberRef getMemberWithName< <%- c.name %> >( <%- c.name %> & obj,const char * name){
            <% for(const m of c.members) {%>
                if(strcmp(name,"<%=m.name%>")==0)
                    return AnyMemberRefVar(std::ref(obj.<%=m.name%>));
            <% } %>
            return {};
        }
    <% } %>




    

    typedef unsigned char MemberIdx;
    template<typename T>
    OptMemberRef getMemberWithIdx( T& obj,MemberIdx idx );
    <% for (const c of classes) {if(!c.isUserDefined) continue; %>
        template<>
        OptMemberRef getMemberWithIdx< <%- c.name %> >(  <%- c.name %> & obj,MemberIdx idx){
            <% for(const [i,m] of Object.entries(c.members)) {%>
                if(idx==<%=i%>)
                    return AnyMemberRefVar(std::ref(obj.<%=m.name%>));
            <% } %>
            return {};
        }
    <% } %>


    template<Vec T>
    OptMemberRef getMemberWithIdx( T& obj,MemberIdx idx){
        if(idx == obj.size()){ // allow appending
            obj.push_back({});
        }
        else if (idx+1 > obj.size()){
            THROW_LOG("accessing out of bound in vector");
            return {};
        }
        return obj[idx];
    }

    template<typename T>
    OptMemberRef getMemberWithIdx( T& obj,MemberIdx idx){
        CONST_ASSERT("getMemberWithIdx");
        return {};
    }


    template<typename T>
        MemberIdx getNumMembers(const T& obj );
    <% for (const c of classes) {if(!c.isUserDefined) continue; %>
        template<>
        MemberIdx getNumMembers< <%- c.name %> >(const <%- c.name %>& obj){
            return <%- Object.keys(c.members).length%>;
        }
    <% } %>

    template<Vec T>
     MemberIdx getNumMembers( const T& obj){
        return obj.size();
    }

    

    template<typename T>
    std::string getMemberNameForIdx( MemberIdx idx );
    <% for (const c of classes) {if(!c.isUserDefined) continue; %>
        template<>
        std::string getMemberNameForIdx< <%- c.name %> >( MemberIdx idx){
            <% for(const [i,m] of Object.entries(c.members)) {%>
                if(idx==<%=i%>)
                    return "<%=m.name%>";
            <% } %>
            return {};
        }
    <% } %>

    template<Vec T>
    std::string getMemberNameForIdx( MemberIdx idx){
        return std::to_string(idx);
    }


    template<typename T>
   std::string getMemberNameForIdx( MemberIdx idx){
        CONST_ASSERT("getMemberNameForIdx");
        return "";
    }

    template<typename T>
    std::optional<MemberIdx > getIdxForMemberName( T& obj,const char * name );
    <% for (const c of classes) {if(!c.isUserDefined) continue; %>
        template<>
        std::optional<MemberIdx > getIdxForMemberName< <%- c.name %> >( <%- c.name %> & obj,const char * name){
            <% for(const [i,m] of Object.entries(c.members)) {%>
                if(strcmp(name,"<%=m.name%>")==0)
                    return <%=i%>;
            <% } %>
            return {};
        }
    <% } %>

    template<Vec T>
    std::optional<MemberIdx > getIdxForMemberName( T& obj,const char * name ){
        if(!isdigit(name[0]))
        {
            THROW_LOG("trying access other thing than an index on vector");
            return {};
        }
        return std::atoi(name);
    }
    template<typename T>
    std::optional<MemberIdx > getIdxForMemberName( T& obj,const char * name ){
        CONST_ASSERT("getIdxForMemberName");
        return {};
    }
    

    struct MemberAddressInt:public std::vector<MemberIdx> {};
    template<typename T>
    OptMemberRef getMemberWithAddressInt(T& obj,const MemberAddressInt &  addr );
    <% for (const c of classes) {if(!c.isUserDefined) continue; %>
        template<>
        OptMemberRef getMemberWithAddressInt< <%- c.name %> >( <%- c.name %> & obj,const MemberAddressInt &  addr ){
            OptMemberRef res = obj;
            for(const auto & ia:addr){
                if(!res){
                    THROW_LOG(std::string("cant find for idx ")+std::to_string(ia));
                    break;
                }
                std::visit([&res,&ia](auto && r){
                    using ArgT = std::decay_t<decltype(r)>;
                    using TRUT = typename uapi::traits::unwrap_ref<ArgT>::type;
                    if constexpr (uapi::variants::isUserDefined<TRUT>::value || uapi::traits::Vec<TRUT>)
                        res= getMemberWithIdx<TRUT>(r,ia);
                   

                },*res);
                
            }
            return res;
        }
    <% } %>

    typedef std::vector<std::string> MemberAddressStr;
    typedef std::optional<MemberAddressInt>  OptMemberAddressInt;
    template<typename T>
    OptMemberAddressInt addressStrToInt( T& obj,const MemberAddressStr &  addr );
    <% for (const c of classes) {if(!c.isUserDefined) continue; %>
        template<>
        OptMemberAddressInt addressStrToInt< <%- c.name %> >( <%- c.name %> & obj,const MemberAddressStr &  addr ){
            OptMemberRef insp = obj;
            MemberAddressInt res;
            for(const auto & a:addr){
                if(!insp){
                    THROW_LOG(std::string("cant find for name ")+a);
                    break;
                }
                std::visit([&insp,&a,&res](auto && r){
                    using ArgT = std::decay_t<decltype(r)>;
                    using TRUT = typename uapi::traits::unwrap_ref<ArgT>::type;
                    if constexpr (uapi::variants::isUserDefined<TRUT>::value || uapi::traits::Vec<TRUT>){
                        auto idx= getIdxForMemberName<TRUT>(r,a.c_str());
                            if(!idx){
                                THROW_LOG(std::string("cant find for name ")+a);
                                return;
                            }
                        insp =getMemberWithIdx<TRUT>(r,*idx);
                        res.push_back(*idx);
                    }
                },*insp);
                
            }
            if(!insp)
                return {};
            return res;
        }
    <% } %>


    template<typename T>
    std::string intAddressToStr(T& obj,const MemberAddressInt &  addri );
    <% for (const c of classes) {if(!c.isUserDefined) continue; %>
        template<>
        std::string intAddressToStr< <%- c.name %> >( <%- c.name %> & obj,const MemberAddressInt &  addri ){
            OptMemberRef insp = obj;
            std::string res;
            for(const auto & i:addri){
                if(!insp){
                    THROW_LOG(std::string("cant find for idx ")+std::to_string(i));
                    break;
                }
                std::visit([&insp,&i,&res](auto && r){
                    using ArgT = std::decay_t<decltype(r)>;
                    using TRUT = typename uapi::traits::unwrap_ref<ArgT>::type;
                    if constexpr (uapi::variants::isUserDefined<TRUT>::value || uapi::traits::Vec<TRUT>){
                        auto memberName= getMemberNameForIdx<TRUT>(i);
                        if(!memberName.size()){
                            THROW_LOG(std::string("cant find for idx ")+(std::to_string(i)));
                            return;
                        }
                        insp =getMemberWithIdx<TRUT>(r,i);
                        res+=std::string("/")+memberName;
                    }

                },*insp);
                
            }
            if(!insp)
                return {};
            return res;
        }
    <% } %>

    MemberAddressStr strAddrFromStr(const std::string & s) { 
        std::string tmp;
        std::stringstream ss(s);
        MemberAddressStr res;
        while (getline(ss, tmp, '/')) {if(tmp.size())res.push_back(tmp);}
        return res;
    }


    template <typename T>
       T  getMemberValueAs(AnyMemberRefVar v){
            T res = {};
            std::visit([&res](auto && arg){
                auto v = arg.get();
                if constexpr (std::is_same_v<T,decltype(v)>){
                    res=v;
                }
            },v);
            return res;
        }
 


// MethodVars

struct VoidReturn{};
struct VoidArgs{};
 <%     
    var argListClasses = {"VoidArgs":[]};
    var methodReturnTypes = {"VoidArgs":[]};
    var methodRefs = {};
    for (const c of classes) {
        for( const m of c.methods){
            var argListClassName = m.args.map(e=>{return e.type}).join('_')+"_MethodArgs"
           var hasNoArgs =  !m.args || (m.args.length==0)
           if(hasNoArgs){
            argListClassName = "VoidArgs";
           }
            if(argListClasses[argListClassName]===undefined && !hasNoArgs){
                argListClasses[argListClassName] = m.args;
            }
            
            m.argListClassName=argListClassName;
            if(m.returnType==="void"){
                m.returnType = "VoidReturn"
            }
            if(methodReturnTypes[m.returnType] == undefined){
                methodReturnTypes[m.returnType] = 1
            }
        }
    }
    for( const [k,args] of Object.entries(argListClasses)){
        if(k=="VoidArgs")continue;
    %>
            
        using <%-k%> = std::tuple<<%- args.map(a=>a.type)%>>;

    <% } %>
    
    typedef  std::variant < <%- Object.keys(argListClasses).join(',') %> > AnyMethodArgsTuple;
    typedef  std::variant < <%- Object.keys(methodReturnTypes).join(',') %> > AnyMethodReturnValue;
    
    struct Method{
        std::string name;
        typedef std::function<AnyMethodReturnValue (const AnyMethodArgsTuple &) >  CallAnyType;
        Method(const std::string & n):name(n){};
        virtual ~Method() = default;

        virtual  AnyMethodArgsTuple getExpectedArgsTuple() = 0;
        virtual AnyMethodArgsTuple parse_args(std::istream & iss) = 0;
        virtual AnyMethodReturnValue getExpectedReturnType() = 0;
        virtual AnyMethodReturnValue parse_resp(std::istream &iss)  = 0;
        CallAnyType call;
    };



    template<typename RT,typename ArgT>
    struct MethodImpl : public Method{
        MethodImpl(const std::string & n):Method(n){}
        AnyMethodArgsTuple parse_args(std::istream & iss) override{
            ArgT res;
            uapi::serialize::parse_value<ArgT>(res,iss);
            return res;
        }
        AnyMethodReturnValue parse_resp(std::istream &iss) override {
            RT res;
            uapi::serialize::parse_value<RT>(res, iss);
            // if constexpr (uapi::traits::printable<RT>)
            //     std::cout << "parse resp method ::"<<res << cppTypeOf<RT>()<< std::endl;
            return res;
        }

        AnyMethodArgsTuple getExpectedArgsTuple() override {
            ArgT exp = {};
            return exp;
        }
        AnyMethodReturnValue getExpectedReturnType() override {
            RT exp = {};
            return exp;
        }

    };
    
   
  
    
   
    template<typename T>
    const std::vector<std::string>&  getMethodNames(T& obj );
    template<typename T>
    std::optional<MemberIdx> getIdxOfMethodName( T & obj,const char * name);
    template<typename T>
    Method* getMethodWithName(T& obj,const char * name );
    <% for (const c of classes) { if(!c.isUserDefined)continue; %>
        template<>
        const std::vector<std::string>& getMethodNames< <%- c.name %> >( <%- c.name %> & obj){
            static std::vector<std::string> methodNames ={
            <%-  Object.values(c.methods).map(e=>{return ('"'+e.name+'"')}).join(',') %>
            };
            return methodNames;
        }
        template<>
        std::optional<MemberIdx> getIdxOfMethodName< <%- c.name %> >( <%- c.name %> & obj,const char * name){
           const auto & m = getMethodNames< <%- c.name %> >(obj);
           auto it = std::find(m.begin(),m.end(),name);
           if(it!=m.end())return MemberIdx(it-m.begin());
           std::cout << "method idx not found : " << name << std::to_string(m.size()) << std::endl;
           for(const auto& mm:m){std::cout  << mm <<","<< std::endl;}
            return {};
        }
        template<>
        Method* getMethodWithName< <%- c.name %> >( <%- c.name %> & obj,const char * name){
            <% for(const m of c.methods) { %>
                if(strcmp(name,"<%=m.name%>")==0){
                static MethodImpl<<%-m.returnType%>,<%-m.argListClassName%>> <%=m.name%>_Function("<%=m.name%>");
            <%=m.name%>_Function.call = [&obj](const AnyMethodArgsTuple & args)->AnyMethodReturnValue{
                <% if(m.argListClassName!="VoidArgs"){ -%>
                                if(auto * resolved = std::get_if<<%-m.argListClassName%>>(&args))
                <% } -%>
                {
                    <% if(m.returnType=="VoidReturn"){ -%>
                        auto res = VoidReturn();
                    <% }else{ -%>
                        auto res=
                    <% } -%>
                        std::apply(&<%-c.name%>::<%-m.name%>, 
                            <% if(m.argListClassName!="VoidArgs"){ -%>
                                std::tuple_cat(std::tie(obj),  *resolved)
                            <% }else{ -%>
                                std::tie(obj)
                            <% } -%>
                            );
                    return res;
                    
                    
                }
                std::cout << "wrong arg type" << std::endl;
                return {};
                
            };
            return &<%=m.name%>_Function;}

            <% } %>
            return {};
        }
    <% } %>

  

} 

namespace serialize{


    template<>
    void write_value<variants::VoidReturn>(std::ostream & ,const variants::VoidReturn & ){}
    template<>
    void parse_value<variants::VoidReturn>(variants::VoidReturn & , std::istream &  ){}
    
    template<>
    void write_value<variants::VoidArgs>(std::ostream & ,const variants::VoidArgs & ){}
    template<>
    void parse_value<variants::VoidArgs>(variants::VoidArgs & , std::istream &  ){}
    

    template<>
    void write_value<variants::AnyMethodArgsTuple>(std::ostream & oss,const variants::AnyMethodArgsTuple & args){
        std::visit([&oss](auto && v){
            using ArgT = std::decay_t<decltype(v)>;
            using TRUT = typename uapi::traits::unwrap_ref<ArgT>::type;
            // std::cout << "writing method arg type " << cppTypeOf<TRUT>() << std::endl;
            write_value<TRUT>(oss,v);
            },args);
        
    }

    <% if(Object.keys(argListClasses).length!=1 && Object.keys(methodReturnTypes).length!=1){ %>
    template<>
    void write_value<variants::AnyMethodReturnValue>(std::ostream & oss,const variants::AnyMethodReturnValue & args){
            std::visit([&oss](auto && v){
                using ArgT = std::decay_t<decltype(v)>;
                using TRUT = typename uapi::traits::unwrap_ref<ArgT>::type;
                write_value<TRUT>(oss,v);
            },args);
        
    }
    <% } %>
    template<>
    void write_value<variants::AnyMemberRefVar>(std::ostream & oss,const variants::AnyMemberRefVar & member){
            std::visit([&oss](auto && v){
                using ArgT = std::decay_t<decltype(v)>;
                using TRUT = typename uapi::traits::unwrap_ref<ArgT>::type;
                write_value<TRUT>(oss, v.get());
            },member);
        
    }

    template<>
    void write_value<variants::MemberAddressInt>(std::ostream & oss,const variants::MemberAddressInt & addrI){
        if(addrI.size()==0){
            write_value<variants::MemberIdx>(oss,255);
            return;
        }
        for(size_t i = 0 ; i<addrI.size()-1;i++){
            auto iv = addrI[i] | 0x80;
            write_value<variants::MemberIdx>(oss,iv);
        }
        auto i = addrI[addrI.size()-1];
        write_value<variants::MemberIdx>(oss,i);
        return;
    }
    template <> void parse_value<variants::MemberAddressInt>(variants::MemberAddressInt &obj, InStr &is) {
     // TODO
     variants::MemberIdx r;
     parse_value<variants::MemberIdx>(r,is);
     if(r==255)return;
     obj.push_back(r & 0x7F);
     while(r >>7){
        parse_value<variants::MemberIdx>(r,is);
        obj.push_back(r & 0x7F);
     }

    }



/*
    <% for (const [k,argListClass] of Object.entries(argListClasses)) {%>
        template<>
        AnyMethodArgsTuple args_from_bin<<%-k%>>(std::istream & iss){
            <%-k%> res {};
            <% var i = -1;for (const [k,val] of Object.entries(argListClass)) {i++;-%>
                uapi::serialize::parse_value<<%-val.type%>>(std::get<<%-i%>>(res),iss);
                <% } %>
            return res;
        }
        template<>
        void args_to_bin<<%-k%>>(std::ostream & oss,AnyMethodArgsTuple& args){
            
            <% var i = -1;for (const [k,val] of Object.entries(argListClass)) {i++;%>
                uapi::serialize::write_value<<%-val.type%>>(oss,std::get<<%-i%>>(args));
                <% } %>
            
        }
        <% } %>
        */
        

    
    
    // template<>
    // void write_value<VoidArgs>(std::ostream & ,VoidArgs & ){}
}


} 

#undef THROW_LOG
